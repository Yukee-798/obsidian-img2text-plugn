/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/.pnpm/dayjs@1.11.6/node_modules/dayjs/dayjs.min.js
var require_dayjs_min = __commonJS({
  "node_modules/.pnpm/dayjs@1.11.6/node_modules/dayjs/dayjs.min.js"(exports, module2) {
    !function(t, e) {
      typeof exports == "object" && typeof module2 != "undefined" ? module2.exports = e() : typeof define == "function" && define.amd ? define(e) : (t = typeof globalThis != "undefined" ? globalThis : t || self).dayjs = e();
    }(exports, function() {
      "use strict";
      var t = 1e3, e = 6e4, n = 36e5, r = "millisecond", i = "second", s = "minute", u = "hour", a = "day", o = "week", f = "month", h = "quarter", c = "year", d = "date", l = "Invalid Date", $ = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, y = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, M = { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), ordinal: function(t2) {
        var e2 = ["th", "st", "nd", "rd"], n2 = t2 % 100;
        return "[" + t2 + (e2[(n2 - 20) % 10] || e2[n2] || e2[0]) + "]";
      } }, m = function(t2, e2, n2) {
        var r2 = String(t2);
        return !r2 || r2.length >= e2 ? t2 : "" + Array(e2 + 1 - r2.length).join(n2) + t2;
      }, v = { s: m, z: function(t2) {
        var e2 = -t2.utcOffset(), n2 = Math.abs(e2), r2 = Math.floor(n2 / 60), i2 = n2 % 60;
        return (e2 <= 0 ? "+" : "-") + m(r2, 2, "0") + ":" + m(i2, 2, "0");
      }, m: function t2(e2, n2) {
        if (e2.date() < n2.date())
          return -t2(n2, e2);
        var r2 = 12 * (n2.year() - e2.year()) + (n2.month() - e2.month()), i2 = e2.clone().add(r2, f), s2 = n2 - i2 < 0, u2 = e2.clone().add(r2 + (s2 ? -1 : 1), f);
        return +(-(r2 + (n2 - i2) / (s2 ? i2 - u2 : u2 - i2)) || 0);
      }, a: function(t2) {
        return t2 < 0 ? Math.ceil(t2) || 0 : Math.floor(t2);
      }, p: function(t2) {
        return { M: f, y: c, w: o, d: a, D: d, h: u, m: s, s: i, ms: r, Q: h }[t2] || String(t2 || "").toLowerCase().replace(/s$/, "");
      }, u: function(t2) {
        return t2 === void 0;
      } }, g = "en", D = {};
      D[g] = M;
      var p = function(t2) {
        return t2 instanceof _;
      }, S = function t2(e2, n2, r2) {
        var i2;
        if (!e2)
          return g;
        if (typeof e2 == "string") {
          var s2 = e2.toLowerCase();
          D[s2] && (i2 = s2), n2 && (D[s2] = n2, i2 = s2);
          var u2 = e2.split("-");
          if (!i2 && u2.length > 1)
            return t2(u2[0]);
        } else {
          var a2 = e2.name;
          D[a2] = e2, i2 = a2;
        }
        return !r2 && i2 && (g = i2), i2 || !r2 && g;
      }, w = function(t2, e2) {
        if (p(t2))
          return t2.clone();
        var n2 = typeof e2 == "object" ? e2 : {};
        return n2.date = t2, n2.args = arguments, new _(n2);
      }, O = v;
      O.l = S, O.i = p, O.w = function(t2, e2) {
        return w(t2, { locale: e2.$L, utc: e2.$u, x: e2.$x, $offset: e2.$offset });
      };
      var _ = function() {
        function M2(t2) {
          this.$L = S(t2.locale, null, true), this.parse(t2);
        }
        var m2 = M2.prototype;
        return m2.parse = function(t2) {
          this.$d = function(t3) {
            var e2 = t3.date, n2 = t3.utc;
            if (e2 === null)
              return new Date(NaN);
            if (O.u(e2))
              return new Date();
            if (e2 instanceof Date)
              return new Date(e2);
            if (typeof e2 == "string" && !/Z$/i.test(e2)) {
              var r2 = e2.match($);
              if (r2) {
                var i2 = r2[2] - 1 || 0, s2 = (r2[7] || "0").substring(0, 3);
                return n2 ? new Date(Date.UTC(r2[1], i2, r2[3] || 1, r2[4] || 0, r2[5] || 0, r2[6] || 0, s2)) : new Date(r2[1], i2, r2[3] || 1, r2[4] || 0, r2[5] || 0, r2[6] || 0, s2);
              }
            }
            return new Date(e2);
          }(t2), this.$x = t2.x || {}, this.init();
        }, m2.init = function() {
          var t2 = this.$d;
          this.$y = t2.getFullYear(), this.$M = t2.getMonth(), this.$D = t2.getDate(), this.$W = t2.getDay(), this.$H = t2.getHours(), this.$m = t2.getMinutes(), this.$s = t2.getSeconds(), this.$ms = t2.getMilliseconds();
        }, m2.$utils = function() {
          return O;
        }, m2.isValid = function() {
          return !(this.$d.toString() === l);
        }, m2.isSame = function(t2, e2) {
          var n2 = w(t2);
          return this.startOf(e2) <= n2 && n2 <= this.endOf(e2);
        }, m2.isAfter = function(t2, e2) {
          return w(t2) < this.startOf(e2);
        }, m2.isBefore = function(t2, e2) {
          return this.endOf(e2) < w(t2);
        }, m2.$g = function(t2, e2, n2) {
          return O.u(t2) ? this[e2] : this.set(n2, t2);
        }, m2.unix = function() {
          return Math.floor(this.valueOf() / 1e3);
        }, m2.valueOf = function() {
          return this.$d.getTime();
        }, m2.startOf = function(t2, e2) {
          var n2 = this, r2 = !!O.u(e2) || e2, h2 = O.p(t2), l2 = function(t3, e3) {
            var i2 = O.w(n2.$u ? Date.UTC(n2.$y, e3, t3) : new Date(n2.$y, e3, t3), n2);
            return r2 ? i2 : i2.endOf(a);
          }, $2 = function(t3, e3) {
            return O.w(n2.toDate()[t3].apply(n2.toDate("s"), (r2 ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e3)), n2);
          }, y2 = this.$W, M3 = this.$M, m3 = this.$D, v2 = "set" + (this.$u ? "UTC" : "");
          switch (h2) {
            case c:
              return r2 ? l2(1, 0) : l2(31, 11);
            case f:
              return r2 ? l2(1, M3) : l2(0, M3 + 1);
            case o:
              var g2 = this.$locale().weekStart || 0, D2 = (y2 < g2 ? y2 + 7 : y2) - g2;
              return l2(r2 ? m3 - D2 : m3 + (6 - D2), M3);
            case a:
            case d:
              return $2(v2 + "Hours", 0);
            case u:
              return $2(v2 + "Minutes", 1);
            case s:
              return $2(v2 + "Seconds", 2);
            case i:
              return $2(v2 + "Milliseconds", 3);
            default:
              return this.clone();
          }
        }, m2.endOf = function(t2) {
          return this.startOf(t2, false);
        }, m2.$set = function(t2, e2) {
          var n2, o2 = O.p(t2), h2 = "set" + (this.$u ? "UTC" : ""), l2 = (n2 = {}, n2[a] = h2 + "Date", n2[d] = h2 + "Date", n2[f] = h2 + "Month", n2[c] = h2 + "FullYear", n2[u] = h2 + "Hours", n2[s] = h2 + "Minutes", n2[i] = h2 + "Seconds", n2[r] = h2 + "Milliseconds", n2)[o2], $2 = o2 === a ? this.$D + (e2 - this.$W) : e2;
          if (o2 === f || o2 === c) {
            var y2 = this.clone().set(d, 1);
            y2.$d[l2]($2), y2.init(), this.$d = y2.set(d, Math.min(this.$D, y2.daysInMonth())).$d;
          } else
            l2 && this.$d[l2]($2);
          return this.init(), this;
        }, m2.set = function(t2, e2) {
          return this.clone().$set(t2, e2);
        }, m2.get = function(t2) {
          return this[O.p(t2)]();
        }, m2.add = function(r2, h2) {
          var d2, l2 = this;
          r2 = Number(r2);
          var $2 = O.p(h2), y2 = function(t2) {
            var e2 = w(l2);
            return O.w(e2.date(e2.date() + Math.round(t2 * r2)), l2);
          };
          if ($2 === f)
            return this.set(f, this.$M + r2);
          if ($2 === c)
            return this.set(c, this.$y + r2);
          if ($2 === a)
            return y2(1);
          if ($2 === o)
            return y2(7);
          var M3 = (d2 = {}, d2[s] = e, d2[u] = n, d2[i] = t, d2)[$2] || 1, m3 = this.$d.getTime() + r2 * M3;
          return O.w(m3, this);
        }, m2.subtract = function(t2, e2) {
          return this.add(-1 * t2, e2);
        }, m2.format = function(t2) {
          var e2 = this, n2 = this.$locale();
          if (!this.isValid())
            return n2.invalidDate || l;
          var r2 = t2 || "YYYY-MM-DDTHH:mm:ssZ", i2 = O.z(this), s2 = this.$H, u2 = this.$m, a2 = this.$M, o2 = n2.weekdays, f2 = n2.months, h2 = function(t3, n3, i3, s3) {
            return t3 && (t3[n3] || t3(e2, r2)) || i3[n3].slice(0, s3);
          }, c2 = function(t3) {
            return O.s(s2 % 12 || 12, t3, "0");
          }, d2 = n2.meridiem || function(t3, e3, n3) {
            var r3 = t3 < 12 ? "AM" : "PM";
            return n3 ? r3.toLowerCase() : r3;
          }, $2 = { YY: String(this.$y).slice(-2), YYYY: this.$y, M: a2 + 1, MM: O.s(a2 + 1, 2, "0"), MMM: h2(n2.monthsShort, a2, f2, 3), MMMM: h2(f2, a2), D: this.$D, DD: O.s(this.$D, 2, "0"), d: String(this.$W), dd: h2(n2.weekdaysMin, this.$W, o2, 2), ddd: h2(n2.weekdaysShort, this.$W, o2, 3), dddd: o2[this.$W], H: String(s2), HH: O.s(s2, 2, "0"), h: c2(1), hh: c2(2), a: d2(s2, u2, true), A: d2(s2, u2, false), m: String(u2), mm: O.s(u2, 2, "0"), s: String(this.$s), ss: O.s(this.$s, 2, "0"), SSS: O.s(this.$ms, 3, "0"), Z: i2 };
          return r2.replace(y, function(t3, e3) {
            return e3 || $2[t3] || i2.replace(":", "");
          });
        }, m2.utcOffset = function() {
          return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
        }, m2.diff = function(r2, d2, l2) {
          var $2, y2 = O.p(d2), M3 = w(r2), m3 = (M3.utcOffset() - this.utcOffset()) * e, v2 = this - M3, g2 = O.m(this, M3);
          return g2 = ($2 = {}, $2[c] = g2 / 12, $2[f] = g2, $2[h] = g2 / 3, $2[o] = (v2 - m3) / 6048e5, $2[a] = (v2 - m3) / 864e5, $2[u] = v2 / n, $2[s] = v2 / e, $2[i] = v2 / t, $2)[y2] || v2, l2 ? g2 : O.a(g2);
        }, m2.daysInMonth = function() {
          return this.endOf(f).$D;
        }, m2.$locale = function() {
          return D[this.$L];
        }, m2.locale = function(t2, e2) {
          if (!t2)
            return this.$L;
          var n2 = this.clone(), r2 = S(t2, e2, true);
          return r2 && (n2.$L = r2), n2;
        }, m2.clone = function() {
          return O.w(this.$d, this);
        }, m2.toDate = function() {
          return new Date(this.valueOf());
        }, m2.toJSON = function() {
          return this.isValid() ? this.toISOString() : null;
        }, m2.toISOString = function() {
          return this.$d.toISOString();
        }, m2.toString = function() {
          return this.$d.toUTCString();
        }, M2;
      }(), T = _.prototype;
      return w.prototype = T, [["$ms", r], ["$s", i], ["$m", s], ["$H", u], ["$W", a], ["$M", f], ["$y", c], ["$D", d]].forEach(function(t2) {
        T[t2[1]] = function(e2) {
          return this.$g(e2, t2[0], t2[1]);
        };
      }), w.extend = function(t2, e2) {
        return t2.$i || (t2(e2, _, w), t2.$i = true), w;
      }, w.locale = S, w.isDayjs = p, w.unix = function(t2) {
        return w(1e3 * t2);
      }, w.en = D[g], w.Ls = D, w.p = {}, w;
    });
  }
});

// node_modules/.pnpm/dayjs@1.11.6/node_modules/dayjs/plugin/weekOfYear.js
var require_weekOfYear = __commonJS({
  "node_modules/.pnpm/dayjs@1.11.6/node_modules/dayjs/plugin/weekOfYear.js"(exports, module2) {
    !function(e, t) {
      typeof exports == "object" && typeof module2 != "undefined" ? module2.exports = t() : typeof define == "function" && define.amd ? define(t) : (e = typeof globalThis != "undefined" ? globalThis : e || self).dayjs_plugin_weekOfYear = t();
    }(exports, function() {
      "use strict";
      var e = "week", t = "year";
      return function(i, n, r) {
        var f = n.prototype;
        f.week = function(i2) {
          if (i2 === void 0 && (i2 = null), i2 !== null)
            return this.add(7 * (i2 - this.week()), "day");
          var n2 = this.$locale().yearStart || 1;
          if (this.month() === 11 && this.date() > 25) {
            var f2 = r(this).startOf(t).add(1, t).date(n2), s = r(this).endOf(e);
            if (f2.isBefore(s))
              return 1;
          }
          var a = r(this).startOf(t).date(n2).startOf(e).subtract(1, "millisecond"), o = this.diff(a, e, true);
          return o < 0 ? r(this).startOf("week").week() : Math.ceil(o);
        }, f.weeks = function(e2) {
          return e2 === void 0 && (e2 = null), this.week(e2);
        };
      };
    });
  }
});

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => JournalPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");
var import_path = __toESM(require("path"));
var import_dayjs = __toESM(require_dayjs_min());
var import_weekOfYear = __toESM(require_weekOfYear());

// settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  journalRootPath: "/Journal"
};
var JournalSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Journal Root Path").setDesc("Directory where journals' root is located.").addText((text) => text.setValue(this.plugin.settings.journalRootPath).onChange(async (value) => {
      this.plugin.settings.journalRootPath = value;
      await this.plugin.saveSettings();
    }));
  }
};

// main.ts
import_dayjs.default.extend(import_weekOfYear.default);
var JournalPlugin = class extends import_obsidian2.Plugin {
  constructor() {
    super(...arguments);
    this.onRibbonIconClick = async (evt) => {
      const vault = this.app.vault;
      const year = (0, import_dayjs.default)().year().toString();
      const month = ((0, import_dayjs.default)().month() + 1).toString().padStart(2, "0");
      const date = (0, import_dayjs.default)().date().toString().padStart(2, "0");
      const week = (0, import_dayjs.default)().week().toString().padStart(2, "0");
      const journalRootPath = this.settings.journalRootPath;
      const newJournalPath = import_path.default.join(journalRootPath, year, `W${week}`, `${month}-${date}.md`);
      const lastJournalFile = this.getLastJournalFile();
      if (lastJournalFile) {
        const isNewJournalCreated = lastJournalFile.basename === `${month}-${date}`;
        if (isNewJournalCreated) {
          await this.openFileInVault(lastJournalFile);
          console.log(`"${newJournalPath}" is existed.`);
        } else {
          const content = await vault.read(lastJournalFile);
          console.log(lastJournalFile);
          const journal = await this.createJournal(newJournalPath, content);
          await this.openFileInVault(journal);
        }
      } else {
        const journal = await this.createJournal(newJournalPath);
        await this.openFileInVault(journal);
      }
    };
  }
  async onload() {
    await this.loadSettings();
    this.addRibbonIcon("dice", "Quick Journal", this.onRibbonIconClick);
    this.addSettingTab(new JournalSettingTab(app, this));
  }
  getLastJournalFile() {
    const journalPathRegExp = new RegExp(`^(${this.settings.journalRootPath})/2[0-9]{3}/W[0-9]{2}/(0|1)[0-9]-(0|1|2|3)[0-9](.md)$`);
    const markdownFiles = this.app.vault.getMarkdownFiles();
    const journalFiles = markdownFiles.filter((file) => journalPathRegExp.test(`/${file.path}`));
    const journalDateNums = journalFiles.map(this.getJournalDateNum);
    const maxDateNumber = Math.max(...journalDateNums);
    const lastJournalFile = journalFiles.find((file) => this.getJournalDateNum(file) === maxDateNumber);
    return lastJournalFile;
  }
  getJournalDateNum(file) {
    const year = file.path.split("/").at(-3);
    const month = file.basename.split("-")[0];
    const date = file.basename.split("-")[1];
    const dateNumber = +`${year}${month}${date}`;
    return dateNumber;
  }
  async createJournal(_path, content = "") {
    const vault = this.app.vault;
    const pathObj = import_path.default.parse(_path);
    const folders = this.getAncestorPaths(pathObj.dir);
    folders.forEach(async (folderPath) => {
      try {
        await vault.createFolder(folderPath);
      } catch (e) {
        console.log(`"${folderPath}" is existed.`);
      }
    });
    return vault.create(_path, content);
  }
  getAncestorPaths(curPath) {
    const folderBaseNames = curPath.split("/").slice(1);
    const folders = [`/${folderBaseNames[0]}`];
    folderBaseNames.forEach((basename, i) => {
      if (i === 0)
        return;
      const preFolderPath = folders.at(-1);
      const curFolderPath = import_path.default.join(preFolderPath, basename);
      folders.push(curFolderPath);
    });
    return folders;
  }
  async openFileInVault(file) {
    return this.app.workspace.getLeaf().openFile(file);
  }
  async onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzLy5wbnBtL2RheWpzQDEuMTEuNi9ub2RlX21vZHVsZXMvZGF5anMvZGF5anMubWluLmpzIiwgIm5vZGVfbW9kdWxlcy8ucG5wbS9kYXlqc0AxLjExLjYvbm9kZV9tb2R1bGVzL2RheWpzL3BsdWdpbi93ZWVrT2ZZZWFyLmpzIiwgIm1haW4udHMiLCAic2V0dGluZ3MudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIiFmdW5jdGlvbih0LGUpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWUoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKGUpOih0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6dHx8c2VsZikuZGF5anM9ZSgpfSh0aGlzLChmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciB0PTFlMyxlPTZlNCxuPTM2ZTUscj1cIm1pbGxpc2Vjb25kXCIsaT1cInNlY29uZFwiLHM9XCJtaW51dGVcIix1PVwiaG91clwiLGE9XCJkYXlcIixvPVwid2Vla1wiLGY9XCJtb250aFwiLGg9XCJxdWFydGVyXCIsYz1cInllYXJcIixkPVwiZGF0ZVwiLGw9XCJJbnZhbGlkIERhdGVcIiwkPS9eKFxcZHs0fSlbLS9dPyhcXGR7MSwyfSk/Wy0vXT8oXFxkezAsMn0pW1R0XFxzXSooXFxkezEsMn0pPzo/KFxcZHsxLDJ9KT86PyhcXGR7MSwyfSk/Wy46XT8oXFxkKyk/JC8seT0vXFxbKFteXFxdXSspXXxZezEsNH18TXsxLDR9fER7MSwyfXxkezEsNH18SHsxLDJ9fGh7MSwyfXxhfEF8bXsxLDJ9fHN7MSwyfXxaezEsMn18U1NTL2csTT17bmFtZTpcImVuXCIsd2Vla2RheXM6XCJTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheVwiLnNwbGl0KFwiX1wiKSxtb250aHM6XCJKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyXCIuc3BsaXQoXCJfXCIpLG9yZGluYWw6ZnVuY3Rpb24odCl7dmFyIGU9W1widGhcIixcInN0XCIsXCJuZFwiLFwicmRcIl0sbj10JTEwMDtyZXR1cm5cIltcIit0KyhlWyhuLTIwKSUxMF18fGVbbl18fGVbMF0pK1wiXVwifX0sbT1mdW5jdGlvbih0LGUsbil7dmFyIHI9U3RyaW5nKHQpO3JldHVybiFyfHxyLmxlbmd0aD49ZT90OlwiXCIrQXJyYXkoZSsxLXIubGVuZ3RoKS5qb2luKG4pK3R9LHY9e3M6bSx6OmZ1bmN0aW9uKHQpe3ZhciBlPS10LnV0Y09mZnNldCgpLG49TWF0aC5hYnMoZSkscj1NYXRoLmZsb29yKG4vNjApLGk9biU2MDtyZXR1cm4oZTw9MD9cIitcIjpcIi1cIikrbShyLDIsXCIwXCIpK1wiOlwiK20oaSwyLFwiMFwiKX0sbTpmdW5jdGlvbiB0KGUsbil7aWYoZS5kYXRlKCk8bi5kYXRlKCkpcmV0dXJuLXQobixlKTt2YXIgcj0xMioobi55ZWFyKCktZS55ZWFyKCkpKyhuLm1vbnRoKCktZS5tb250aCgpKSxpPWUuY2xvbmUoKS5hZGQocixmKSxzPW4taTwwLHU9ZS5jbG9uZSgpLmFkZChyKyhzPy0xOjEpLGYpO3JldHVybisoLShyKyhuLWkpLyhzP2ktdTp1LWkpKXx8MCl9LGE6ZnVuY3Rpb24odCl7cmV0dXJuIHQ8MD9NYXRoLmNlaWwodCl8fDA6TWF0aC5mbG9vcih0KX0scDpmdW5jdGlvbih0KXtyZXR1cm57TTpmLHk6Yyx3Om8sZDphLEQ6ZCxoOnUsbTpzLHM6aSxtczpyLFE6aH1bdF18fFN0cmluZyh0fHxcIlwiKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL3MkLyxcIlwiKX0sdTpmdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwPT09dH19LGc9XCJlblwiLEQ9e307RFtnXT1NO3ZhciBwPWZ1bmN0aW9uKHQpe3JldHVybiB0IGluc3RhbmNlb2YgX30sUz1mdW5jdGlvbiB0KGUsbixyKXt2YXIgaTtpZighZSlyZXR1cm4gZztpZihcInN0cmluZ1wiPT10eXBlb2YgZSl7dmFyIHM9ZS50b0xvd2VyQ2FzZSgpO0Rbc10mJihpPXMpLG4mJihEW3NdPW4saT1zKTt2YXIgdT1lLnNwbGl0KFwiLVwiKTtpZighaSYmdS5sZW5ndGg+MSlyZXR1cm4gdCh1WzBdKX1lbHNle3ZhciBhPWUubmFtZTtEW2FdPWUsaT1hfXJldHVybiFyJiZpJiYoZz1pKSxpfHwhciYmZ30sdz1mdW5jdGlvbih0LGUpe2lmKHAodCkpcmV0dXJuIHQuY2xvbmUoKTt2YXIgbj1cIm9iamVjdFwiPT10eXBlb2YgZT9lOnt9O3JldHVybiBuLmRhdGU9dCxuLmFyZ3M9YXJndW1lbnRzLG5ldyBfKG4pfSxPPXY7Ty5sPVMsTy5pPXAsTy53PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHcodCx7bG9jYWxlOmUuJEwsdXRjOmUuJHUseDplLiR4LCRvZmZzZXQ6ZS4kb2Zmc2V0fSl9O3ZhciBfPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gTSh0KXt0aGlzLiRMPVModC5sb2NhbGUsbnVsbCwhMCksdGhpcy5wYXJzZSh0KX12YXIgbT1NLnByb3RvdHlwZTtyZXR1cm4gbS5wYXJzZT1mdW5jdGlvbih0KXt0aGlzLiRkPWZ1bmN0aW9uKHQpe3ZhciBlPXQuZGF0ZSxuPXQudXRjO2lmKG51bGw9PT1lKXJldHVybiBuZXcgRGF0ZShOYU4pO2lmKE8udShlKSlyZXR1cm4gbmV3IERhdGU7aWYoZSBpbnN0YW5jZW9mIERhdGUpcmV0dXJuIG5ldyBEYXRlKGUpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlJiYhL1okL2kudGVzdChlKSl7dmFyIHI9ZS5tYXRjaCgkKTtpZihyKXt2YXIgaT1yWzJdLTF8fDAscz0ocls3XXx8XCIwXCIpLnN1YnN0cmluZygwLDMpO3JldHVybiBuP25ldyBEYXRlKERhdGUuVVRDKHJbMV0saSxyWzNdfHwxLHJbNF18fDAscls1XXx8MCxyWzZdfHwwLHMpKTpuZXcgRGF0ZShyWzFdLGksclszXXx8MSxyWzRdfHwwLHJbNV18fDAscls2XXx8MCxzKX19cmV0dXJuIG5ldyBEYXRlKGUpfSh0KSx0aGlzLiR4PXQueHx8e30sdGhpcy5pbml0KCl9LG0uaW5pdD1mdW5jdGlvbigpe3ZhciB0PXRoaXMuJGQ7dGhpcy4keT10LmdldEZ1bGxZZWFyKCksdGhpcy4kTT10LmdldE1vbnRoKCksdGhpcy4kRD10LmdldERhdGUoKSx0aGlzLiRXPXQuZ2V0RGF5KCksdGhpcy4kSD10LmdldEhvdXJzKCksdGhpcy4kbT10LmdldE1pbnV0ZXMoKSx0aGlzLiRzPXQuZ2V0U2Vjb25kcygpLHRoaXMuJG1zPXQuZ2V0TWlsbGlzZWNvbmRzKCl9LG0uJHV0aWxzPWZ1bmN0aW9uKCl7cmV0dXJuIE99LG0uaXNWYWxpZD1mdW5jdGlvbigpe3JldHVybiEodGhpcy4kZC50b1N0cmluZygpPT09bCl9LG0uaXNTYW1lPWZ1bmN0aW9uKHQsZSl7dmFyIG49dyh0KTtyZXR1cm4gdGhpcy5zdGFydE9mKGUpPD1uJiZuPD10aGlzLmVuZE9mKGUpfSxtLmlzQWZ0ZXI9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdyh0KTx0aGlzLnN0YXJ0T2YoZSl9LG0uaXNCZWZvcmU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5lbmRPZihlKTx3KHQpfSxtLiRnPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gTy51KHQpP3RoaXNbZV06dGhpcy5zZXQobix0KX0sbS51bml4PWZ1bmN0aW9uKCl7cmV0dXJuIE1hdGguZmxvb3IodGhpcy52YWx1ZU9mKCkvMWUzKX0sbS52YWx1ZU9mPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJGQuZ2V0VGltZSgpfSxtLnN0YXJ0T2Y9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLHI9ISFPLnUoZSl8fGUsaD1PLnAodCksbD1mdW5jdGlvbih0LGUpe3ZhciBpPU8udyhuLiR1P0RhdGUuVVRDKG4uJHksZSx0KTpuZXcgRGF0ZShuLiR5LGUsdCksbik7cmV0dXJuIHI/aTppLmVuZE9mKGEpfSwkPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIE8udyhuLnRvRGF0ZSgpW3RdLmFwcGx5KG4udG9EYXRlKFwic1wiKSwocj9bMCwwLDAsMF06WzIzLDU5LDU5LDk5OV0pLnNsaWNlKGUpKSxuKX0seT10aGlzLiRXLE09dGhpcy4kTSxtPXRoaXMuJEQsdj1cInNldFwiKyh0aGlzLiR1P1wiVVRDXCI6XCJcIik7c3dpdGNoKGgpe2Nhc2UgYzpyZXR1cm4gcj9sKDEsMCk6bCgzMSwxMSk7Y2FzZSBmOnJldHVybiByP2woMSxNKTpsKDAsTSsxKTtjYXNlIG86dmFyIGc9dGhpcy4kbG9jYWxlKCkud2Vla1N0YXJ0fHwwLEQ9KHk8Zz95Kzc6eSktZztyZXR1cm4gbChyP20tRDptKyg2LUQpLE0pO2Nhc2UgYTpjYXNlIGQ6cmV0dXJuICQoditcIkhvdXJzXCIsMCk7Y2FzZSB1OnJldHVybiAkKHYrXCJNaW51dGVzXCIsMSk7Y2FzZSBzOnJldHVybiAkKHYrXCJTZWNvbmRzXCIsMik7Y2FzZSBpOnJldHVybiAkKHYrXCJNaWxsaXNlY29uZHNcIiwzKTtkZWZhdWx0OnJldHVybiB0aGlzLmNsb25lKCl9fSxtLmVuZE9mPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnN0YXJ0T2YodCwhMSl9LG0uJHNldD1mdW5jdGlvbih0LGUpe3ZhciBuLG89Ty5wKHQpLGg9XCJzZXRcIisodGhpcy4kdT9cIlVUQ1wiOlwiXCIpLGw9KG49e30sblthXT1oK1wiRGF0ZVwiLG5bZF09aCtcIkRhdGVcIixuW2ZdPWgrXCJNb250aFwiLG5bY109aCtcIkZ1bGxZZWFyXCIsblt1XT1oK1wiSG91cnNcIixuW3NdPWgrXCJNaW51dGVzXCIsbltpXT1oK1wiU2Vjb25kc1wiLG5bcl09aCtcIk1pbGxpc2Vjb25kc1wiLG4pW29dLCQ9bz09PWE/dGhpcy4kRCsoZS10aGlzLiRXKTplO2lmKG89PT1mfHxvPT09Yyl7dmFyIHk9dGhpcy5jbG9uZSgpLnNldChkLDEpO3kuJGRbbF0oJCkseS5pbml0KCksdGhpcy4kZD15LnNldChkLE1hdGgubWluKHRoaXMuJEQseS5kYXlzSW5Nb250aCgpKSkuJGR9ZWxzZSBsJiZ0aGlzLiRkW2xdKCQpO3JldHVybiB0aGlzLmluaXQoKSx0aGlzfSxtLnNldD1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmNsb25lKCkuJHNldCh0LGUpfSxtLmdldD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpc1tPLnAodCldKCl9LG0uYWRkPWZ1bmN0aW9uKHIsaCl7dmFyIGQsbD10aGlzO3I9TnVtYmVyKHIpO3ZhciAkPU8ucChoKSx5PWZ1bmN0aW9uKHQpe3ZhciBlPXcobCk7cmV0dXJuIE8udyhlLmRhdGUoZS5kYXRlKCkrTWF0aC5yb3VuZCh0KnIpKSxsKX07aWYoJD09PWYpcmV0dXJuIHRoaXMuc2V0KGYsdGhpcy4kTStyKTtpZigkPT09YylyZXR1cm4gdGhpcy5zZXQoYyx0aGlzLiR5K3IpO2lmKCQ9PT1hKXJldHVybiB5KDEpO2lmKCQ9PT1vKXJldHVybiB5KDcpO3ZhciBNPShkPXt9LGRbc109ZSxkW3VdPW4sZFtpXT10LGQpWyRdfHwxLG09dGhpcy4kZC5nZXRUaW1lKCkrcipNO3JldHVybiBPLncobSx0aGlzKX0sbS5zdWJ0cmFjdD1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmFkZCgtMSp0LGUpfSxtLmZvcm1hdD1mdW5jdGlvbih0KXt2YXIgZT10aGlzLG49dGhpcy4kbG9jYWxlKCk7aWYoIXRoaXMuaXNWYWxpZCgpKXJldHVybiBuLmludmFsaWREYXRlfHxsO3ZhciByPXR8fFwiWVlZWS1NTS1ERFRISDptbTpzc1pcIixpPU8ueih0aGlzKSxzPXRoaXMuJEgsdT10aGlzLiRtLGE9dGhpcy4kTSxvPW4ud2Vla2RheXMsZj1uLm1vbnRocyxoPWZ1bmN0aW9uKHQsbixpLHMpe3JldHVybiB0JiYodFtuXXx8dChlLHIpKXx8aVtuXS5zbGljZSgwLHMpfSxjPWZ1bmN0aW9uKHQpe3JldHVybiBPLnMocyUxMnx8MTIsdCxcIjBcIil9LGQ9bi5tZXJpZGllbXx8ZnVuY3Rpb24odCxlLG4pe3ZhciByPXQ8MTI/XCJBTVwiOlwiUE1cIjtyZXR1cm4gbj9yLnRvTG93ZXJDYXNlKCk6cn0sJD17WVk6U3RyaW5nKHRoaXMuJHkpLnNsaWNlKC0yKSxZWVlZOnRoaXMuJHksTTphKzEsTU06Ty5zKGErMSwyLFwiMFwiKSxNTU06aChuLm1vbnRoc1Nob3J0LGEsZiwzKSxNTU1NOmgoZixhKSxEOnRoaXMuJEQsREQ6Ty5zKHRoaXMuJEQsMixcIjBcIiksZDpTdHJpbmcodGhpcy4kVyksZGQ6aChuLndlZWtkYXlzTWluLHRoaXMuJFcsbywyKSxkZGQ6aChuLndlZWtkYXlzU2hvcnQsdGhpcy4kVyxvLDMpLGRkZGQ6b1t0aGlzLiRXXSxIOlN0cmluZyhzKSxISDpPLnMocywyLFwiMFwiKSxoOmMoMSksaGg6YygyKSxhOmQocyx1LCEwKSxBOmQocyx1LCExKSxtOlN0cmluZyh1KSxtbTpPLnModSwyLFwiMFwiKSxzOlN0cmluZyh0aGlzLiRzKSxzczpPLnModGhpcy4kcywyLFwiMFwiKSxTU1M6Ty5zKHRoaXMuJG1zLDMsXCIwXCIpLFo6aX07cmV0dXJuIHIucmVwbGFjZSh5LChmdW5jdGlvbih0LGUpe3JldHVybiBlfHwkW3RdfHxpLnJlcGxhY2UoXCI6XCIsXCJcIil9KSl9LG0udXRjT2Zmc2V0PWZ1bmN0aW9uKCl7cmV0dXJuIDE1Ki1NYXRoLnJvdW5kKHRoaXMuJGQuZ2V0VGltZXpvbmVPZmZzZXQoKS8xNSl9LG0uZGlmZj1mdW5jdGlvbihyLGQsbCl7dmFyICQseT1PLnAoZCksTT13KHIpLG09KE0udXRjT2Zmc2V0KCktdGhpcy51dGNPZmZzZXQoKSkqZSx2PXRoaXMtTSxnPU8ubSh0aGlzLE0pO3JldHVybiBnPSgkPXt9LCRbY109Zy8xMiwkW2ZdPWcsJFtoXT1nLzMsJFtvXT0odi1tKS82MDQ4ZTUsJFthXT0odi1tKS84NjRlNSwkW3VdPXYvbiwkW3NdPXYvZSwkW2ldPXYvdCwkKVt5XXx8dixsP2c6Ty5hKGcpfSxtLmRheXNJbk1vbnRoPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZW5kT2YoZikuJER9LG0uJGxvY2FsZT1mdW5jdGlvbigpe3JldHVybiBEW3RoaXMuJExdfSxtLmxvY2FsZT1mdW5jdGlvbih0LGUpe2lmKCF0KXJldHVybiB0aGlzLiRMO3ZhciBuPXRoaXMuY2xvbmUoKSxyPVModCxlLCEwKTtyZXR1cm4gciYmKG4uJEw9ciksbn0sbS5jbG9uZT1mdW5jdGlvbigpe3JldHVybiBPLncodGhpcy4kZCx0aGlzKX0sbS50b0RhdGU9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IERhdGUodGhpcy52YWx1ZU9mKCkpfSxtLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmlzVmFsaWQoKT90aGlzLnRvSVNPU3RyaW5nKCk6bnVsbH0sbS50b0lTT1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLiRkLnRvSVNPU3RyaW5nKCl9LG0udG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kZC50b1VUQ1N0cmluZygpfSxNfSgpLFQ9Xy5wcm90b3R5cGU7cmV0dXJuIHcucHJvdG90eXBlPVQsW1tcIiRtc1wiLHJdLFtcIiRzXCIsaV0sW1wiJG1cIixzXSxbXCIkSFwiLHVdLFtcIiRXXCIsYV0sW1wiJE1cIixmXSxbXCIkeVwiLGNdLFtcIiREXCIsZF1dLmZvckVhY2goKGZ1bmN0aW9uKHQpe1RbdFsxXV09ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuJGcoZSx0WzBdLHRbMV0pfX0pKSx3LmV4dGVuZD1mdW5jdGlvbih0LGUpe3JldHVybiB0LiRpfHwodChlLF8sdyksdC4kaT0hMCksd30sdy5sb2NhbGU9Uyx3LmlzRGF5anM9cCx3LnVuaXg9ZnVuY3Rpb24odCl7cmV0dXJuIHcoMWUzKnQpfSx3LmVuPURbZ10sdy5Mcz1ELHcucD17fSx3fSkpOyIsICIhZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZSh0KTooZT1cInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOmV8fHNlbGYpLmRheWpzX3BsdWdpbl93ZWVrT2ZZZWFyPXQoKX0odGhpcywoZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgZT1cIndlZWtcIix0PVwieWVhclwiO3JldHVybiBmdW5jdGlvbihpLG4scil7dmFyIGY9bi5wcm90b3R5cGU7Zi53ZWVrPWZ1bmN0aW9uKGkpe2lmKHZvaWQgMD09PWkmJihpPW51bGwpLG51bGwhPT1pKXJldHVybiB0aGlzLmFkZCg3KihpLXRoaXMud2VlaygpKSxcImRheVwiKTt2YXIgbj10aGlzLiRsb2NhbGUoKS55ZWFyU3RhcnR8fDE7aWYoMTE9PT10aGlzLm1vbnRoKCkmJnRoaXMuZGF0ZSgpPjI1KXt2YXIgZj1yKHRoaXMpLnN0YXJ0T2YodCkuYWRkKDEsdCkuZGF0ZShuKSxzPXIodGhpcykuZW5kT2YoZSk7aWYoZi5pc0JlZm9yZShzKSlyZXR1cm4gMX12YXIgYT1yKHRoaXMpLnN0YXJ0T2YodCkuZGF0ZShuKS5zdGFydE9mKGUpLnN1YnRyYWN0KDEsXCJtaWxsaXNlY29uZFwiKSxvPXRoaXMuZGlmZihhLGUsITApO3JldHVybiBvPDA/cih0aGlzKS5zdGFydE9mKFwid2Vla1wiKS53ZWVrKCk6TWF0aC5jZWlsKG8pfSxmLndlZWtzPWZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDA9PT1lJiYoZT1udWxsKSx0aGlzLndlZWsoZSl9fX0pKTsiLCAiaW1wb3J0IHsgUGx1Z2luLCBURmlsZSB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHBhdGggZnJvbSBcInBhdGhcIjtcbmltcG9ydCBkYXlqcyBmcm9tIFwiZGF5anNcIjtcbmltcG9ydCB3ZWVrT2ZZZWFyIGZyb20gXCJkYXlqcy9wbHVnaW4vd2Vla09mWWVhclwiO1xuaW1wb3J0IEpvdXJuYWxTZXR0aW5nVGFiLCB7XG4gIERFRkFVTFRfU0VUVElOR1MsXG4gIEpvdXJuYWxQbHVnaW5TZXR0aW5ncyxcbn0gZnJvbSBcInNldHRpbmdzXCI7XG5cbmRheWpzLmV4dGVuZCh3ZWVrT2ZZZWFyKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSm91cm5hbFBsdWdpbiBleHRlbmRzIFBsdWdpbiB7XG4gIHNldHRpbmdzOiBKb3VybmFsUGx1Z2luU2V0dGluZ3M7XG5cbiAgYXN5bmMgb25sb2FkKCkge1xuICAgIGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XG5cbiAgICB0aGlzLmFkZFJpYmJvbkljb24oXCJkaWNlXCIsIFwiUXVpY2sgSm91cm5hbFwiLCB0aGlzLm9uUmliYm9uSWNvbkNsaWNrKTtcbiAgICB0aGlzLmFkZFNldHRpbmdUYWIobmV3IEpvdXJuYWxTZXR0aW5nVGFiKGFwcCwgdGhpcykpO1xuICB9XG5cbiAgb25SaWJib25JY29uQ2xpY2sgPSBhc3luYyAoZXZ0OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgY29uc3QgdmF1bHQgPSB0aGlzLmFwcC52YXVsdDtcblxuICAgIGNvbnN0IHllYXIgPSBkYXlqcygpLnllYXIoKS50b1N0cmluZygpO1xuICAgIGNvbnN0IG1vbnRoID0gKGRheWpzKCkubW9udGgoKSArIDEpLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgXCIwXCIpO1xuICAgIGNvbnN0IGRhdGUgPSBkYXlqcygpLmRhdGUoKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsIFwiMFwiKTtcbiAgICBjb25zdCB3ZWVrID0gZGF5anMoKS53ZWVrKCkudG9TdHJpbmcoKS5wYWRTdGFydCgyLCBcIjBcIik7XG5cbiAgICBjb25zdCBqb3VybmFsUm9vdFBhdGggPSB0aGlzLnNldHRpbmdzLmpvdXJuYWxSb290UGF0aDtcblxuICAgIGNvbnN0IG5ld0pvdXJuYWxQYXRoID0gcGF0aC5qb2luKFxuICAgICAgam91cm5hbFJvb3RQYXRoLFxuICAgICAgeWVhcixcbiAgICAgIGBXJHt3ZWVrfWAsXG4gICAgICBgJHttb250aH0tJHtkYXRlfS5tZGBcbiAgICApO1xuXG4gICAgY29uc3QgbGFzdEpvdXJuYWxGaWxlID0gdGhpcy5nZXRMYXN0Sm91cm5hbEZpbGUoKTtcblxuICAgIGlmIChsYXN0Sm91cm5hbEZpbGUpIHtcbiAgICAgIGNvbnN0IGlzTmV3Sm91cm5hbENyZWF0ZWQgPVxuICAgICAgICBsYXN0Sm91cm5hbEZpbGUuYmFzZW5hbWUgPT09IGAke21vbnRofS0ke2RhdGV9YDtcbiAgICAgIGlmIChpc05ld0pvdXJuYWxDcmVhdGVkKSB7XG4gICAgICAgIGF3YWl0IHRoaXMub3BlbkZpbGVJblZhdWx0KGxhc3RKb3VybmFsRmlsZSk7XG4gICAgICAgIGNvbnNvbGUubG9nKGBcIiR7bmV3Sm91cm5hbFBhdGh9XCIgaXMgZXhpc3RlZC5gKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCB2YXVsdC5yZWFkKGxhc3RKb3VybmFsRmlsZSk7XG4gICAgICAgIGNvbnNvbGUubG9nKGxhc3RKb3VybmFsRmlsZSk7XG4gICAgICAgIGNvbnN0IGpvdXJuYWwgPSBhd2FpdCB0aGlzLmNyZWF0ZUpvdXJuYWwobmV3Sm91cm5hbFBhdGgsIGNvbnRlbnQpO1xuICAgICAgICBhd2FpdCB0aGlzLm9wZW5GaWxlSW5WYXVsdChqb3VybmFsKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgam91cm5hbCA9IGF3YWl0IHRoaXMuY3JlYXRlSm91cm5hbChuZXdKb3VybmFsUGF0aCk7XG4gICAgICBhd2FpdCB0aGlzLm9wZW5GaWxlSW5WYXVsdChqb3VybmFsKTtcbiAgICB9XG4gIH07XG5cbiAgZ2V0TGFzdEpvdXJuYWxGaWxlKCk6IFRGaWxlIHwgdW5kZWZpbmVkIHtcbiAgICBjb25zdCBqb3VybmFsUGF0aFJlZ0V4cCA9IG5ldyBSZWdFeHAoXG4gICAgICBgXigke3RoaXMuc2V0dGluZ3Muam91cm5hbFJvb3RQYXRofSkvMlswLTldezN9L1dbMC05XXsyfS8oMHwxKVswLTldLSgwfDF8MnwzKVswLTldKC5tZCkkYFxuICAgICk7XG5cbiAgICBjb25zdCBtYXJrZG93bkZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xuICAgIGNvbnN0IGpvdXJuYWxGaWxlcyA9IG1hcmtkb3duRmlsZXMuZmlsdGVyKChmaWxlKSA9PlxuICAgICAgam91cm5hbFBhdGhSZWdFeHAudGVzdChgLyR7ZmlsZS5wYXRofWApXG4gICAgKTtcblxuICAgIGNvbnN0IGpvdXJuYWxEYXRlTnVtcyA9IGpvdXJuYWxGaWxlcy5tYXAodGhpcy5nZXRKb3VybmFsRGF0ZU51bSk7XG4gICAgY29uc3QgbWF4RGF0ZU51bWJlciA9IE1hdGgubWF4KC4uLmpvdXJuYWxEYXRlTnVtcyk7XG5cbiAgICBjb25zdCBsYXN0Sm91cm5hbEZpbGUgPSBqb3VybmFsRmlsZXMuZmluZChcbiAgICAgIChmaWxlKSA9PiB0aGlzLmdldEpvdXJuYWxEYXRlTnVtKGZpbGUpID09PSBtYXhEYXRlTnVtYmVyXG4gICAgKTtcblxuICAgIHJldHVybiBsYXN0Sm91cm5hbEZpbGU7XG4gIH1cblxuICBnZXRKb3VybmFsRGF0ZU51bShmaWxlOiBURmlsZSkge1xuICAgIGNvbnN0IHllYXIgPSBmaWxlLnBhdGguc3BsaXQoXCIvXCIpLmF0KC0zKSE7XG4gICAgY29uc3QgbW9udGggPSBmaWxlLmJhc2VuYW1lLnNwbGl0KFwiLVwiKVswXTtcbiAgICBjb25zdCBkYXRlID0gZmlsZS5iYXNlbmFtZS5zcGxpdChcIi1cIilbMV07XG4gICAgY29uc3QgZGF0ZU51bWJlciA9ICtgJHt5ZWFyfSR7bW9udGh9JHtkYXRlfWA7XG4gICAgcmV0dXJuIGRhdGVOdW1iZXI7XG4gIH1cblxuICBhc3luYyBjcmVhdGVKb3VybmFsKF9wYXRoOiBzdHJpbmcsIGNvbnRlbnQ6IHN0cmluZyA9IFwiXCIpOiBQcm9taXNlPFRGaWxlPiB7XG4gICAgY29uc3QgdmF1bHQgPSB0aGlzLmFwcC52YXVsdDtcblxuICAgIGNvbnN0IHBhdGhPYmogPSBwYXRoLnBhcnNlKF9wYXRoKTtcblxuICAgIGNvbnN0IGZvbGRlcnMgPSB0aGlzLmdldEFuY2VzdG9yUGF0aHMocGF0aE9iai5kaXIpO1xuXG4gICAgZm9sZGVycy5mb3JFYWNoKGFzeW5jIChmb2xkZXJQYXRoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCB2YXVsdC5jcmVhdGVGb2xkZXIoZm9sZGVyUGF0aCk7XG4gICAgICB9IGNhdGNoIHtcbiAgICAgICAgY29uc29sZS5sb2coYFwiJHtmb2xkZXJQYXRofVwiIGlzIGV4aXN0ZWQuYCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdmF1bHQuY3JlYXRlKF9wYXRoLCBjb250ZW50KTtcbiAgfVxuXG4gIC8qXG4gICAgZS5nLiBnZXRBbmNlc3RvclBhdGhzKCcvcm9vdC9mb2xkZXIxL2ZvbGRlcjInKVxuICAgIFtcbiAgICAgICcvcm9vdCcsXG4gICAgICAnL3Jvb3QvZm9sZGVyMScsXG4gICAgICAnL3Jvb3QvZm9sZGVyMS9mb2xkZXIyJyxcbiAgICBdIFxuICAqL1xuICBnZXRBbmNlc3RvclBhdGhzKGN1clBhdGg6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgICBjb25zdCBmb2xkZXJCYXNlTmFtZXMgPSBjdXJQYXRoLnNwbGl0KFwiL1wiKS5zbGljZSgxKTtcbiAgICBjb25zdCBmb2xkZXJzID0gW2AvJHtmb2xkZXJCYXNlTmFtZXNbMF19YF07XG5cbiAgICBmb2xkZXJCYXNlTmFtZXMuZm9yRWFjaCgoYmFzZW5hbWUsIGkpID0+IHtcbiAgICAgIGlmIChpID09PSAwKSByZXR1cm47XG4gICAgICBjb25zdCBwcmVGb2xkZXJQYXRoID0gZm9sZGVycy5hdCgtMSkhO1xuICAgICAgY29uc3QgY3VyRm9sZGVyUGF0aCA9IHBhdGguam9pbihwcmVGb2xkZXJQYXRoLCBiYXNlbmFtZSk7XG4gICAgICBmb2xkZXJzLnB1c2goY3VyRm9sZGVyUGF0aCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZm9sZGVycztcbiAgfVxuXG4gIGFzeW5jIG9wZW5GaWxlSW5WYXVsdChmaWxlOiBURmlsZSkge1xuICAgIHJldHVybiB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhZigpLm9wZW5GaWxlKGZpbGUpO1xuICB9XG5cbiAgYXN5bmMgb251bmxvYWQoKSB7fVxuXG4gIGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcbiAgICB0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcbiAgfVxuXG4gIGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcbiAgICBhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xuICB9XG59XG4iLCAiaW1wb3J0IEpvdXJuYWxQbHVnaW4gZnJvbSBcIm1haW5cIjtcbmltcG9ydCB7IEFwcCwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZyB9IGZyb20gXCJvYnNpZGlhblwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIEpvdXJuYWxQbHVnaW5TZXR0aW5ncyB7XG4gIGpvdXJuYWxSb290UGF0aDogc3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3QgREVGQVVMVF9TRVRUSU5HUzogSm91cm5hbFBsdWdpblNldHRpbmdzID0ge1xuICBqb3VybmFsUm9vdFBhdGg6IFwiL0pvdXJuYWxcIixcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEpvdXJuYWxTZXR0aW5nVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XG4gIHBsdWdpbjogSm91cm5hbFBsdWdpbjtcblxuICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBKb3VybmFsUGx1Z2luKSB7XG4gICAgc3VwZXIoYXBwLCBwbHVnaW4pO1xuICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICB9XG5cbiAgZGlzcGxheSgpOiB2b2lkIHtcbiAgICBsZXQgeyBjb250YWluZXJFbCB9ID0gdGhpcztcblxuICAgIGNvbnRhaW5lckVsLmVtcHR5KCk7XG5cbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgIC5zZXROYW1lKFwiSm91cm5hbCBSb290IFBhdGhcIilcbiAgICAgIC5zZXREZXNjKFwiRGlyZWN0b3J5IHdoZXJlIGpvdXJuYWxzJyByb290IGlzIGxvY2F0ZWQuXCIpXG4gICAgICAuYWRkVGV4dCgodGV4dCkgPT5cbiAgICAgICAgdGV4dFxuICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5qb3VybmFsUm9vdFBhdGgpXG4gICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3Muam91cm5hbFJvb3RQYXRoID0gdmFsdWU7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICB9KVxuICAgICAgKTsgXG4gIH1cbn1cblxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBLEtBQUMsU0FBUyxHQUFFLEdBQUU7QUFBQyxNQUFVLE9BQU8sV0FBakIsWUFBMEIsQUFBYSxPQUFPLFdBQXBCLGNBQTJCLFFBQU8sVUFBUSxFQUFFLElBQUUsQUFBWSxPQUFPLFVBQW5CLGNBQTJCLE9BQU8sTUFBSSxPQUFPLENBQUMsSUFBRyxLQUFFLEFBQWEsT0FBTyxjQUFwQixjQUErQixhQUFXLEtBQUcsTUFBTSxRQUFNLEVBQUU7QUFBQSxJQUFDLEVBQUUsU0FBTSxXQUFVO0FBQUM7QUFBYSxVQUFJLElBQUUsS0FBSSxJQUFFLEtBQUksSUFBRSxNQUFLLElBQUUsZUFBYyxJQUFFLFVBQVMsSUFBRSxVQUFTLElBQUUsUUFBTyxJQUFFLE9BQU0sSUFBRSxRQUFPLElBQUUsU0FBUSxJQUFFLFdBQVUsSUFBRSxRQUFPLElBQUUsUUFBTyxJQUFFLGdCQUFlLElBQUUsOEZBQTZGLElBQUUsdUZBQXNGLElBQUUsRUFBQyxNQUFLLE1BQUssVUFBUywyREFBMkQsTUFBTSxHQUFHLEdBQUUsUUFBTyx3RkFBd0YsTUFBTSxHQUFHLEdBQUUsU0FBUSxTQUFTLElBQUU7QUFBQyxZQUFJLEtBQUUsQ0FBQyxNQUFLLE1BQUssTUFBSyxJQUFJLEdBQUUsS0FBRSxLQUFFO0FBQUksZUFBTSxNQUFJLEtBQUcsSUFBRyxNQUFFLE1BQUksT0FBSyxHQUFFLE9BQUksR0FBRSxNQUFJO0FBQUEsTUFBRyxFQUFDLEdBQUUsSUFBRSxTQUFTLElBQUUsSUFBRSxJQUFFO0FBQUMsWUFBSSxLQUFFLE9BQU8sRUFBQztBQUFFLGVBQU0sQ0FBQyxNQUFHLEdBQUUsVUFBUSxLQUFFLEtBQUUsS0FBRyxNQUFNLEtBQUUsSUFBRSxHQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUMsSUFBRTtBQUFBLE1BQUMsR0FBRSxJQUFFLEVBQUMsR0FBRSxHQUFFLEdBQUUsU0FBUyxJQUFFO0FBQUMsWUFBSSxLQUFFLENBQUMsR0FBRSxVQUFVLEdBQUUsS0FBRSxLQUFLLElBQUksRUFBQyxHQUFFLEtBQUUsS0FBSyxNQUFNLEtBQUUsRUFBRSxHQUFFLEtBQUUsS0FBRTtBQUFHLGVBQU8sT0FBRyxJQUFFLE1BQUksT0FBSyxFQUFFLElBQUUsR0FBRSxHQUFHLElBQUUsTUFBSSxFQUFFLElBQUUsR0FBRSxHQUFHO0FBQUEsTUFBQyxHQUFFLEdBQUUsWUFBVyxJQUFFLElBQUU7QUFBQyxZQUFHLEdBQUUsS0FBSyxJQUFFLEdBQUUsS0FBSztBQUFFLGlCQUFNLENBQUMsR0FBRSxJQUFFLEVBQUM7QUFBRSxZQUFJLEtBQUUsS0FBSSxJQUFFLEtBQUssSUFBRSxHQUFFLEtBQUssS0FBSSxJQUFFLE1BQU0sSUFBRSxHQUFFLE1BQU0sSUFBRyxLQUFFLEdBQUUsTUFBTSxFQUFFLElBQUksSUFBRSxDQUFDLEdBQUUsS0FBRSxLQUFFLEtBQUUsR0FBRSxLQUFFLEdBQUUsTUFBTSxFQUFFLElBQUksS0FBRyxNQUFFLEtBQUcsSUFBRyxDQUFDO0FBQUUsZUFBTSxDQUFFLEVBQUUsTUFBRyxNQUFFLE1BQUksTUFBRSxLQUFFLEtBQUUsS0FBRSxRQUFLO0FBQUEsTUFBRSxHQUFFLEdBQUUsU0FBUyxJQUFFO0FBQUMsZUFBTyxLQUFFLElBQUUsS0FBSyxL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TUFBRyxLQUFLLElBQUksSUFBRSxFQUFDO0FBQUEsUUFBQyxHQUFFLEdBQUUsT0FBSyxXQUFVO0FBQUMsaUJBQU8sS0FBSyxNQUFNLEtBQUssUUFBUSxJQUFFLEdBQUc7QUFBQSxRQUFDLEdBQUUsR0FBRSxVQUFRLFdBQVU7QUFBQyxpQkFBTyxLQUFLLEdBQUcsUUFBUTtBQUFBLFFBQUMsR0FBRSxHQUFFLFVBQVEsU0FBUyxJQUFFLElBQUU7QUFBQyxjQUFJLEtBQUUsTUFBSyxLQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBQyxLQUFHLElBQUUsS0FBRSxFQUFFLEVBQUUsRUFBQyxHQUFFLEtBQUUsU0FBUyxJQUFFLElBQUU7QUFBQyxnQkFBSSxLQUFFLEVBQUUsRUFBRSxHQUFFLEtBQUcsS0FBSyxJQUFJLEdBQUUsSUFBRyxJQUFFLEVBQUMsSUFBRSxJQUFJLEtBQUssR0FBRSxJQUFHLElBQUUsRUFBQyxHQUFFLEVBQUM7QUFBRSxtQkFBTyxLQUFFLEtBQUUsR0FBRSxNQUFNLENBQUM7QUFBQSxVQUFDLEdBQUUsS0FBRSxTQUFTLElBQUUsSUFBRTtBQUFDLG1CQUFPLEVBQUUsRUFBRSxHQUFFLE9BQU8sRUFBRSxJQUFHLE1BQU0sR0FBRSxPQUFPLEdBQUcsR0FBRyxNQUFFLENBQUMsR0FBRSxHQUFFLEdBQUUsQ0FBQyxJQUFFLENBQUMsSUFBRyxJQUFHLElBQUcsR0FBRyxHQUFHLE1BQU0sRUFBQyxDQUFDLEdBQUUsRUFBQztBQUFBLFVBQUMsR0FBRSxLQUFFLEtBQUssSUFBRyxLQUFFLEtBQUssSUFBRyxLQUFFLEtBQUssSUFBRyxLQUFFLFFBQU8sTUFBSyxLQUFHLFFBQU07QUFBSSxrQkFBTztBQUFBLGlCQUFRO0FBQUUscUJBQU8sS0FBRSxHQUFFLEdBQUUsQ0FBQyxJQUFFLEdBQUUsSUFBRyxFQUFFO0FBQUEsaUJBQU87QUFBRSxxQkFBTyxLQUFFLEdBQUUsR0FBRSxFQUFDLElBQUUsR0FBRSxHQUFFLEtBQUUsQ0FBQztBQUFBLGlCQUFPO0FBQUUsa0JBQUksS0FBRSxLQUFLLFFBQVEsRUFB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QUFPLFNBQVMsSUFBRTtBQUFDLGNBQUksS0FBRSxNQUFLLEtBQUUsS0FBSyxRQUFRO0FBQUUsY0FBRyxDQUFDLEtBQUssUUFBUTtBQUFFLG1CQUFPLEdBQUUsZUFBYTtBQUFFLGNBQUksS0FBRSxNQUFHLHdCQUF1QixLQUFFLEVBQUUsRUFBRSxJQUFJLEdBQUUsS0FBRSxLQUFLLElBQUcsS0FBRSxLQUFLLElBQUcsS0FBRSxLQUFLLElBQUcsS0FBRSxHQUFFLFVBQVMsS0FBRSxHQUFFLFFBQU8sS0FBRSxTQUFTLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBQyxtQkFBTyxNQUFJLElBQUUsT0FBSSxHQUFFLElBQUUsRUFBQyxNQUFJLEdBQUUsSUFBRyxNQUFNLEdBQUUsRUFBQztBQUFBLFVBQUMsR0FBRSxLQUFFLFNBQVMsSUFBRTtBQUFDLG1CQUFPLEVBQUUsRUFBRSxLQUFFLE1BQUksSUFBRyxJQUFFLEdBQUc7QUFBQSxVQUFDLEdBQUUsS0FBRSxHQUFFLFlBQVUsU0FBUyxJQUFFLElBQUUsSUFBRTtBQUFDLGdCQUFJLEtBQUUsS0FBRSxLQUFHLE9BQUs7QUFBSyxtQkFBTyxLQUFFLEdBQUUsWUFBWSxJQUFFO0FBQUEsVUFBQyxHQUFFLEtBQUUsRUFBQyxJQUFHLE9BQU8sS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFFLEdBQUUsTUFBSyxLQUFLLElBQUcsR0FBRSxLQUFFLEdBQUUsSUFBRyxFQUFFLEVBQUUsS0FBRSxHQUFFLEdBQUUsR0FBRyxHQUFFLEtBQUksR0FBRSxHQUFFLGFBQVksSUFBRSxJQUFFLENBQUMsR0FBRSxNQUFLLEdBQUUsSUFBRSxFQUFDLEdBQUUsR0FBRSxLQUFLLElBQUcsSUFBRyxFQUFFLEVBQUUsS0FBSyxJQUFHLEdBQUUsR0FBRyxHQUFFLEdBQUUsT0FBTyxLQUFLLEVBQUUsR0FBRSxJQUFHLEdBQUUsR0FBRSxhQUFZLEtBQUssSUFBRyxJQUFFLENBQUMsR0FBRSxLQUFJLEdBQUUsR0FBRSxlQUFjLEtBQUssSUFBRyxJQUFFLENBQUMsR0FBRSxNQUFLLEdBQUUsS0FBSyxLQUFJLEdBQUUsT0FBTyxFQUFDLEdBQUUsSUFBRyxFQUFFLEVBQUUsSUFBRSxHQUFFLEdBQUcsR0FBRSxHQUFFLEdBQUUsQ0FBQyxHQUFFLElBQUcsR0FBRSxDQUFDLEdBQUUsR0FBRSxHQUFFLElBQUUsSUFBRSxJQUFFLEdBQUUsR0FBRSxHQUFFLElBQUUsSUFBRSxLQUFFLEdBQUUsR0FBRSxPQUFPLEVBQUMsR0FBRSxJQUFHLEVBQUUsRUFBRSxJQUFFLEdBQUUsR0FBRyxHQUFFLEdBQUUsT0FBTyxLQUFLLEVBQUUsR0FBRSxJQUFHLEVBQUUsRUFBRSxLQUFLLElBQUcsR0FBRSxHQUFHLEdBQUUsS0FBSSxFQUFFLEVBQUUsS0FBSyxLQUFJLEdBQUUsR0FBRyxHQUFFLEdBQUUsR0FBQztBQUFFLGlCQUFPLEdBQUUsUUFBUSxHQUFHLFNBQVMsSUFBRSxJQUFFO0FBQUMsbUJBQU8sTUFBRyxHQUFFLE9BQUksR0FBRSxRQUFRLEtBQUksRUFBRTtBQUFBLFVBQUMsQ0FBRTtBQUFBLFFBQUMsR0FBRSxHQUFFLFlBQVUsV0FBVTtBQUFDLGlCQUFPLEtBQUcsQ0FBQyxLQUFLLE1BQU0sS0FBSyxHQUFHLGtCQUFrQixJQUFFLEVBQUU7QUFBQSxRQUFDLEdBQUUsR0FBRSxPQUFLLFNBQVMsSUFBRSxJQUFFLElBQUU7QUFBQyxjQUFJLElBQUUsS0FBRSxFQUFFLEVBQUUsRUFBQyxHQUFFLEtBQUUsRUFBRSxFQUFDLEdBQUUsS0FBRyxJQUFFLFVBQVUsSUFBRSxLQUFLLFVBQVUsS0FBRyxHQUFFLEtBQUUsT0FBSyxJQUFFLEtBQUUsRUFBRSxFQUFFLE1BQUssRUFBQztBQUFFLGlCQUFPLEtBQUcsTUFBRSxDQUFDLEdBQUUsR0FBRSxLQUFHLEtBQUUsSUFBRyxHQUFFLEtBQUcsSUFBRSxHQUFFLEtBQUcsS0FBRSxHQUFFLEdBQUUsS0FBSSxNQUFFLE1BQUcsUUFBTyxHQUFFLEtBQUksTUFBRSxNQUFHLE9BQU0sR0FBRSxLQUFHLEtBQUUsR0FBRSxHQUFFLEtBQUcsS0FBRSxHQUFFLEdBQUUsS0FBRyxLQUFFLEdBQUUsSUFB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
